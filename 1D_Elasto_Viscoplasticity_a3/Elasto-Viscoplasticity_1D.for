! User material subroutine
! Elasto - Viscoplasticity in 1D
! Author: Prafull Bhosale,
!         M.Tech Design Engineering,
!         Department of Mechanical Engineering,
!         Indian Institute of Technology, Bombay

      SUBROUTINE UMAT(STRESS, STATEV, DDSDDE, SSE, SPD, SCD, RPL,DDSDDT, DRPLDE, DRPLDT, STRAN, DSTRAN, TIME, DTIME, TEMP,DTEMP, PREDEF, DPRED, CMNAME, NDI, NSHR, NTENS, NSTATV,PROPS, NPROPS, COORDS, DROT, PNEWDT, CELENT, DFGRD0,DFGRD1, NOEL, NPT, LAYER, KSPT, KSTEP, KINC)
!
      INCLUDE 'ABA_PARAM.INC'
!
      CHARACTER*80 CMNAME
! 
      DIMENSION STRESS(NTENS), STATEV(NSTATV),DDSDDE(NTENS, NTENS),DDSDDT(NTENS),DRPLDE(NTENS),STRAN(NTENS),DSTRAN(NTENS),TIME(2),PREDEF(1), DPRED(1), PROPS(NPROPS),COORDS(3),DROT(3, 3), DFGRD0(3, 3), DFGRD1(3, 3)

      character*4 t1_str
      character*8 c_str
      character*4 DTIME_str
      character*256 outFileName, folderPath
      logical :: exist
! Recover equivalent plastic strain, total strains, plastic
! strains,back stress,damage and Helmholtz free energy term.
!
      epsilon_total = STATEV(1) ! total strain
      epsilon_vp = STATEV(2) ! visco-plastic strain
      beta = STATEV(3) ! back stress
      alpha = STATEV(4) ! equivalent plastic strain
!
! Material Properties
! PROPS corresponds to constants= term in inp file e.g. *User Material, constants=4
      E = PROPS(1) ! Young's modulus
      E_T = PROPS(2)
      sigma_0 = PROPS(3)
      theta = PROPS(4) ! parameter for combined isotropic - kinematic hardening
      eta = PROPS(5) ! viscosity parameter
      c = PROPS(6) ! strain rate
      H = (E*E_T)/(E-E_T)
      
!
! open file for storing output generated by fortran code
10    FORMAT(I30,I30,ES30.8,ES30.8,ES30.8,ES30.8,ES30.8,ES30.8,ES30.8)
11    FORMAT(A30,A30,A30,A30,A30,A30,A30,A30,A30)

      t1 = 0.03/c
      write(t1_str, 12) t1
      write(c_str, 13) c 
      write(DTIME_str, 12) DTIME 
12    format (F3.1)
13    format (F5.3)
      folderPath = 'D:\MTechDesign\Sem4\ME759_NonlinearFEM\Codes\Assignment3\'
!      outFileName = TRIM(ADJUSTL(folderPath)) // '\t=t1\t1=' // TRIM(ADJUSTL(t1_str)) // '_c=' // TRIM(ADJUSTL(c_str)) //'\delta_t='// TRIM(ADJUSTL(DTIME_str))//'\fortran_code_output.csv'
      outFileName = TRIM(ADJUSTL(folderPath)) // 'fortran_code_output.csv'
      
      inquire(file=outFileName, exist=exist)
      if (exist) then
            open(9, file=outFileName, status="old", position="append", action="write")
      else
            open(9, file=outFileName, status="new", action="write")      
            write(9,11) 'Element nb','Integration Point','Time','Stress','Total Strain','Visco-plastic Strain','Equivalent viscoplastic Strain','Back Stress','Yield Stress'


      end if



! Start algorithm
      sigma_y = sigma_0 + theta*H*alpha

! write values at beginning of time period i.e. t=0
      write(9,10) NOEL, NPT, TIME(1), STRESS(1), STRAN(1), epsilon_vp, alpha, beta, sigma_y
      
      tau = eta/(E+H) ! relaxation time

! calculate trial stress
      epsilon_total = epsilon_total + DSTRAN(1)
!      epsilon_star = c*tau
!      epsilon_0 = sigma_0/E
!      epsilon_ = c*TIME(1)
!      epsilon_vp = (1-E_T/E)*(-epsilon_star*(1-exp(-(epsilon_-epsilon_0)/epsilon_star)) + epsilon_ - epsilon_0)
!      STRESS(1) = sigma_0 + E_T*(epsilon_-epsilon_0) + (E-E_T)*epsilon_star*(1-exp(-(epsilon_-epsilon_0)/epsilon_star))
!      STRESS(1) = E*(epsilon_total - epsilon_vp)
      STRESS(1)= STRESS(1) + E*DSTRAN(1)

! Calculate relative trial stress
      relative_stress = STRESS(1)-beta ! relative stress = sigma - beta
      
! loading function

      f = abs(relative_stress) - sigma_y ! loading function

      
! check if yield condition is satisfies

      if (f < 0.) then
          DDSDDE(1,1) = E
      else
      
! for non-linear strain hardening we have to do local Newton-Raphson iterations to get delta_gamma value
!          tol = 0.0001
!          max_iter = 100
!          delta_gamma_k = 0
!          alpha_k = alpha
!          do i=1,max_iter
!              rel_stress = STRESS(1)-beta ! relative stress = sigma - beta
!              f_k = abs(rel_stress)-delta_gamma_k*E-(sigma_0 + theta*H*alpha_k)
!              df_k = -(E+H)
!              delta_gamma_k = delta_gamma_k - f_k/df_k
!              alpha_k = alpha_k + delta_gamma_k
!              if (abs(f_k) < tol) then
!                  exit
!              end if
!              
!          end do
!          delta_gamma = delta_gamma_k

! for linear strain hardening delta_gamma can be calculated as follows
          delta_gamma = f/(E+H)
          delta_gamma = delta_gamma * (DTIME/tau)/(1+DTIME/tau)

          STRESS(1)=STRESS(1) - delta_gamma*E*sign(1.,relative_stress)
          epsilon_vp = epsilon_vp + delta_gamma*sign(1.,relative_stress)
          beta = beta + delta_gamma*(1-theta)*H*sign(1.,relative_stress)
          alpha = alpha + delta_gamma
          
!         Algorithmic tangent modulus
          DDSDDE(1,1) = (E*H)/(E+H)
          DDSDDE(1,1) = E/(1+DTIME/tau) + ((DTIME/tau)/(1+DTIME/tau))*DDSDDE(1,1)
      end if
      
      
!
!     Store updated state variables
!
      STATEV(1)=epsilon_total ! total strain
      STATEV(2)=epsilon_vp ! plastic strain
      STATEV(3)=beta ! back stress
      STATEV(4)=alpha ! equivalent plastic strain
      STATEV(5)=sigma_y ! yield stress
      
! write data in out file for postprocessing
!      call csv_write(9,NOEL,.false.)
!      call csv_write(9,NPT,.false.)
!      call csv_write(9,STRESS(1),.false.)
!      call csv_write(9,STRAN(1),.false.)
!      call csv_write(9,epsilon_vp,.false.)
!      call csv_write(9,alpha,.false.)
!      call csv_write(9,beta,.false.)
!      call csv_write(9,sigma_y,.true.)
!      write(9,'(*(g14.7,:,","))') NOEL, NPT, STRESS(1), STRAN(1), epsilon_vp, alpha, beta, sigma_y
      write(9,10) NOEL, NPT, TIME(1) + DTIME, STRESS(1), epsilon_total, epsilon_vp, alpha, beta, sigma_y
      close(9)
      return
      end
