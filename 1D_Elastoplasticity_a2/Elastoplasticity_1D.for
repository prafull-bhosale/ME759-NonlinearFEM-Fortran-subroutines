! User material subroutine
! Elasto - plasticity in 1D
! Author: Prafull Bhosale,
!         M.Tech Design Engineering,
!         Department of Mechanical Engineering,
!         Indian Institute of Technology, Bombay
      SUBROUTINE UMAT(STRESS, STATEV, DDSDDE, SSE, SPD, SCD, RPL,DDSDDT, DRPLDE, DRPLDT, STRAN, DSTRAN, TIME, DTIME, TEMP,DTEMP, PREDEF, DPRED, CMNAME, NDI, NSHR, NTENS, NSTATV,PROPS, NPROPS, COORDS, DROT, PNEWDT, CELENT, DFGRD0,DFGRD1, NOEL, NPT, LAYER, KSPT, KSTEP, KINC)
!
      INCLUDE 'ABA_PARAM.INC'
!
      CHARACTER*80 CMNAME
! 
      DIMENSION STRESS(NTENS), STATEV(NSTATV),DDSDDE(NTENS, NTENS),DDSDDT(NTENS),DRPLDE(NTENS),STRAN(NTENS),DSTRAN(NTENS),TIME(2),PREDEF(1), DPRED(1), PROPS(NPROPS),COORDS(3),DROT(3, 3), DFGRD0(3, 3), DFGRD1(3, 3)

      character*4 thetaVal
      character*256 outFileName, folderPath
      logical :: exist
! Recover equivalent plastic strain, total strains, plastic
! strains,back stress,damage and Helmholtz free energy term.
!
      epsilon_total = STATEV(1) ! total strain
      epsilon_p = STATEV(2) ! plastic strain
      beta = STATEV(3) ! back stress
      alpha = STATEV(4) ! equivalent plastic strain
!
! Material Properties
! PROPS corresponds to constants= term in inp file e.g. *User Material, constants=4
      E = PROPS(1) ! Young's modulus
      E_T = PROPS(2)
      sigma_0 = PROPS(3)
      theta = PROPS(4) ! parameter for combined isotropic - kinematic hardening
      H = (E*E_T)/(E-E_T)
      
!
! open file for storing output generated by fortran code
10    FORMAT(I30,I30,ES30.8,ES30.8,ES30.8,ES30.8,ES30.8,ES30.8,ES30.8)
11    FORMAT(A30,A30,A30,A30,A30,A30,A30,A30,A30)

      write(thetaVal, 12) theta 
12    format (F3.1)
      folderPath = 'D:\MTechDesign\Sem4\ME759_NonlinearFEM\Codes\Assignment2\Part_a\theta_'
      outFileName=TRIM(ADJUSTL(folderPath)) // TRIM(ADJUSTL(thetaVal)) //'\fortran_code_output_theta_' // TRIM(ADJUSTL(thetaVal)) // '.csv'
      
      inquire(file=outFileName, exist=exist)
      if (exist) then
            open(9, file=outFileName, status="old", position="append", action="write")
      else
            open(9, file=outFileName, status="new", action="write")
!            call csv_write(9,'Element nb',.false.)
!            call csv_write(9,'Integration Point',.false.)
!            call csv_write(9,'Stress',.false.)
!            call csv_write(9,'Total Strain',.false.)
!            call csv_write(9,'Plastic Strain',.false.)
!            call csv_write(9,'Equivalent Plastic Strain',.false.)
!            call csv_write(9,'Back Stress',.false.)
!            call csv_write(9,'Yield Stress',.true.)

!            write(1,'(*(A30,:,","))') 'Element nb','Integration Point','Stress','Total Strain','Plastic Strain','Equivalent Plastic Strain','Back Stress','Yield Stress' 
      
            write(9,11) 'Element nb','Integration Point','Time','Stress','Total Strain','Plastic Strain','Equivalent Plastic Strain','Back Stress','Yield Stress'
      end if

!      open(9, file = outFileName,status='unknown', action="READWRITE")
      
! calculate trial stress
      STRESS(1)=STRESS(1) + E*DSTRAN(1)
      epsilon_total = epsilon_total + DSTRAN(1)

! Calculate relative trial stress
      relative_stress = STRESS(1)-beta ! relative stress = sigma - beta
      
! yield condition
      sigma_y = sigma_0 + theta*H*alpha
      f = abs(relative_stress) - sigma_y
      
! check if yield condition is satisfies

      if (f < 0.) then
          DDSDDE(1,1) = E
      else
      
! for non-linear strain hardening we have to do local Newton-Raphson iterations to get delta_gamma value
!          tol = 0.0001
!          max_iter = 100
!          delta_gamma_k = 0
!          alpha_k = alpha
!          do i=1,max_iter
!              rel_stress = STRESS(1)-beta ! relative stress = sigma - beta
!              f_k = abs(rel_stress)-delta_gamma_k*E-(sigma_0 + theta*H*alpha_k)
!              df_k = -(E+H)
!              delta_gamma_k = delta_gamma_k - f_k/df_k
!              alpha_k = alpha_k + delta_gamma_k
!              if (abs(f_k) < tol) then
!                  exit
!              end if
!              
!          end do
!          delta_gamma = delta_gamma_k

! for linear strain hardening delta_gamma can be calculated as follows
          delta_gamma = f/(E+H)

          STRESS(1)=STRESS(1) - delta_gamma*E*sign(1.,relative_stress)
          epsilon_p = epsilon_p + delta_gamma*sign(1.,relative_stress)
          beta = beta + delta_gamma*(1-theta)*H*sign(1.,relative_stress)
          alpha = alpha + delta_gamma
          
          DDSDDE(1,1) = (E*H)/(E+H)
      end if
      
      
!
!     Store updated state variables
!
      STATEV(1)=epsilon_total ! total strain
      STATEV(2)=epsilon_p ! plastic strain
      STATEV(3)=beta ! back stress
      STATEV(4)=alpha ! equivalent plastic strain
      STATEV(5)=sigma_y ! yield stress
      
! write data in out file for postprocessing
!      call csv_write(9,NOEL,.false.)
!      call csv_write(9,NPT,.false.)
!      call csv_write(9,STRESS(1),.false.)
!      call csv_write(9,STRAN(1),.false.)
!      call csv_write(9,epsilon_p,.false.)
!      call csv_write(9,alpha,.false.)
!      call csv_write(9,beta,.false.)
!      call csv_write(9,sigma_y,.true.)
!      write(9,'(*(g14.7,:,","))') NOEL, NPT, STRESS(1), STRAN(1), epsilon_p, alpha, beta, sigma_y
      write(9,10) NOEL, NPT, TIME(1), STRESS(1), STRAN(1), epsilon_p, alpha, beta, sigma_y
      close(9)
      return
      end
