! Reference: https://github.com/jgomezc1/ABAQUS-US
!                                                                         
!  USER ELEMENT SUBROUTINE
!                                                                         
! UEL for 4 node, 2D plane strain, quadrilateral finite element
!  2X2 Gauss integration                                                  
!                                                                         
!  CREATED BY PRAFULL BHOSALE
!  REFERING TO CODE FROM JUAN GOMEZ(https://github.com/jgomezc1/ABAQUS-US)

!     1-4: STRESS VECTOR(sigma_33,sigma_11,sigma22,sigma_12)                            (4)                     
!    5-8: TOTAL STRAIN VECTOR(epsilon_33,epsilon_11,epsilon22,gamma12)                 (4)                      
!                                                                            TOTAL     32 SVARS                 

! Values of stresses and strains at Gauss points
!                                                                      
!     33, 34, 35, 36: STRESS AT GAUSS POINT SPECIFIED                              
!     37, 38, 39, 40  STRAIN at GAUSS POINT SPECIFIED                                
!                                                                      
!                                   TOTAL     40 SVARS                 

      SUBROUTINE UEL(RHS,AMATRX,SVARS,ENERGY,NDOFEL,NRHS,NSVARS,PROPS,NPROPS,COORDS,MCRD,NNODE,U,DU,V,A,JTYPE,TIME,DTIME,KSTEP,KINC,JELEM,PARAMS,NDLOAD,JDLTYP,ADLMAG,PREDEF,NPREDF,LFLAGS,MLVARX,DDLMAG,MDLOAD,PNEWDT,JPROPS,NJPROP,PERIOD)
      
      INCLUDE 'ABA_PARAM.INC'
      CHARACTER*80 CMNAME
      
      PARAMETER (NTENS=4,NGPT_XI=2,NGPT_ETA=2)!     Number of Gauss-points for XI and eta
      
!     Parameter arrays from UEL.f
      DIMENSION RHS(MLVARX,*),AMATRX(NDOFEL,NDOFEL),SVARS(NSVARS),ENERGY(8),PROPS(*),COORDS(MCRD,NNODE),U(NDOFEL),DU(MLVARX,*),V(NDOFEL),A(NDOFEL),TIME(2),PARAMS(3),JDLTYP(MDLOAD,*),ADLMAG(MDLOAD,*),DDLMAG(MDLOAD,*),PREDEF(2,NPREDF,NNODE),LFLAGS(*),JPROPS(*)

!     User defined arrays
      DIMENSION B(NTENS,NDOFEL),BT(NDOFEL,NTENS),BLM(1,NDOFEL),BLMT(NDOFEL,1),FRST1(NDOFEL,NDOFEL),FRST2(NDOFEL,1),dShapeFcn4Q(MCRD,NNODE),XX(2,NNODE),GP_XI(NGPT_XI),GP_ETA(NGPT_ETA),GP_W(2),D_E(NTENS,NTENS),COORDS_T(NNODE,MCRD),XJ(MCRD,MCRD),XJI(MCRD,MCRD),AUX1(NTENS,NDOFEL),STRESS(NTENS),STRAN(NTENS),DSTRAN(NTENS),EELAS(NTENS),EPLAS(NTENS),SR(NDOFEL),GShapeFcn4Q(MCRD,NNODE),ShapeFcn4QVec(1,NNODE),GPCOORD(1,MCRD)

!      dimension tmp(8)
      !write(9,*) 'MCRD', MCRD
      !write(9,*) 'NNODE', NNODE
      !write(9,*) 'NDOFEL', NDOFEL
! display nodal coordinates
!      DO II=1,MCRD
!        DO JJ=1,NNODE
!          !write(9,*) 'coords', COORDS(II,JJ)
!        END DO
!      END DO

! open file for storing output generated by fortran code
10    FORMAT(I12,ES12.4,ES12.4,ES12.4,ES12.4,ES12.4,ES12.4,ES12.4,ES12.4,ES12.4,ES12.4)
11    FORMAT(A12,A12,A12,A12,A12,A12,A12,A12,A12,A12,A12)
      character*256 outFileName, folderPath
      character*4 elemType
      folderPath = 'D:\MTechDesign\Sem4\ME759_NonlinearFEM\Codes\Assignment1\'
      write(elemType, 12) JTYPE 
12    format (I4) 
      outFileName=TRIM(ADJUSTL(folderPath)) // 'fortran_code_output_' // TRIM(ADJUSTL(elemType)) // '.csv'
      write(6,*) outFileName,folderPath
      open(9, file = outFileName,status='unknown', action="READWRITE")  
      write(9,11) 'Element nb','COORD1','COORD2','S11','S22','S33','S12','E11','E22','E33','E12'
      
! Clears RHS vector and Stiffness matrix
!      write(9,*) 'ELEMENT NUMBER', JELEM
      CALL KCLEARV(RHS,NDOFEL)
      CALL KCLEAR(AMATRX,NDOFEL,NDOFEL)
      CALL KCLEAR(AUX1,NTENS,NDOFEL)
      
! define Gauss points
      GP_XI(1)=-1./SQRT(3.)
      GP_XI(2)=1./SQRT(3.)
      GP_ETA(1)=-1./SQRT(3.)
      GP_ETA(2)=1./SQRT(3.)
      GP_W(1)=1
      GP_W(2)=1
      
! extract material properties
      E = PROPS(1)
      poisson_ratio = PROPS(2)
      !write(9,*) 'E', E, 'poisson_ratio', poisson_ratio
      
! calculate D_e matrix
      D_E_COEFF = E/((1.+poisson_ratio)*(1.-2.*poisson_ratio))
      CALL KCLEAR(D_E,NTENS,NTENS)
      D_E(1,1) = D_E_COEFF*(1.-poisson_ratio)
      D_E(1,2) = D_E_COEFF*poisson_ratio
      D_E(1,3) = D_E_COEFF*poisson_ratio
      D_E(2,1) = D_E_COEFF*poisson_ratio
      D_E(2,2) = D_E_COEFF*(1.-poisson_ratio)
      D_E(2,3) = D_E_COEFF*poisson_ratio
      D_E(3,1) = D_E_COEFF*poisson_ratio
      D_E(3,2) = D_E_COEFF*poisson_ratio
      D_E(3,3) = D_E_COEFF*(1.-poisson_ratio)
      D_E(4,4) = D_E_COEFF*(1.-2.*poisson_ratio)/2.
      
!      write(9,*) 'D_e'
!      DO II=1,NTENS
!        write(9,9) D_E(II,1),D_E(II,2),D_E(II,3),D_E(II,4)
!      END DO

! transpose COORDS matrix to get nodal coordinates in form [x_e   y_e]
      CALL KMTRAN(COORDS,MCRD,NNODE,COORDS_T)
!      write(9,*) 'COORDS TRANSPOSE'
!      DO II=1,NNODE
!        write(9,9) COORDS_T(II,1),COORDS_T(II,2)
!      END DO

      NSVARS_N=2
      NSVARS_F=NSVARS-NSVARS_N
      NN=1
      NGPT_F=4
      
!     Loops around all Gauss points
      DO I=1,NGPT_XI
        DO J=1,NGPT_ETA

!         Compute State variable index corresponding
!         to current Gauss point and load stress,total strain
!         elastic strain,plastic strain and equivalent plastic
!         strain from state variables as defined in USER ELEMENT. 
!         Different variables are required for different constitutive models.
          ISVINT_F=1+(NN-1)*NSVARS_F/NGPT_F
          JJ=1
          DO II=ISVINT_F,ISVINT_F+3
            STRESS(JJ)=SVARS(II)
            STRAN(JJ )=SVARS(II+4)
            JJ=JJ+1
          END DO

!          write(9,*) 'I',I,'J',J
          CALL KCLEAR(GShapeFcn4Q,MCRD,NNODE)
          CALL KCLEAR(B,NTENS,NDOFEL)
          CALL KCLEAR(XJ,MCRD,MCRD)
          GShapeFcn4Q(1,1)=(1./4.)*(GP_ETA(J)-1.)
          GShapeFcn4Q(1,2)=(1./4.)*(1.-GP_ETA(J))
          GShapeFcn4Q(1,3)=(1./4.)*(1.+GP_ETA(J))
          GShapeFcn4Q(1,4)=(1./4.)*(-1.-GP_ETA(J))
          GShapeFcn4Q(2,1)=(1./4.)*(GP_XI(I)-1.)
          GShapeFcn4Q(2,2)=(1./4.)*(-1.-GP_XI(I))
          GShapeFcn4Q(2,3)=(1./4.)*(1.+GP_XI(I))
          GShapeFcn4Q(2,4)=(1./4.)*(1.-GP_XI(I))
!          write(9,*) 'GShapeFcn4Q'
!          DO II=1,MCRD
!            write(9,9) GShapeFcn4Q(II,1),GShapeFcn4Q(II,2),GShapeFcn4Q(II,3),GShapeFcn4Q(II,4)
!          END DO
          
!          write(9,*) 'J11', XJ(1,1), 'J12', XJ(1,2), 'J21', XJ(2,1), 'J22', XJ(2,2)
!          DUM=0.
!          DO II=1,MCRD
!            DO JJ=1,MCRD
!              DO KK=1,NNODE
!                XJ(II,JJ)=XJ(II,JJ)+GShapeFcn4Q(II,KK)*COORDS_T(KK,JJ)
!                write(9,*) 'GShapeFcn4Q(II,KK)*COORDS_T(KK,JJ)',GShapeFcn4Q(II,KK)*COORDS_T(KK,JJ)
!                write(9,*) 'XJ',II,JJ,XJ(II,JJ)
!              END DO
!              !XJ(II,JJ)=DUM
!              !write(9,*) 'XJ',II,JJ, XJ(II,JJ)
!              DUM=0.
!            END DO
!          END DO
          CALL KMMULT(GShapeFcn4Q,MCRD,NNODE,COORDS_T,NNODE,MCRD,XJ) ! computes jacobian matrix as GN$Q*COORDS_T matrix
!          write(9,*) 'J11', XJ(1,1), 'J12', XJ(1,2), 'J21', XJ(2,1), 'J22', XJ(2,2)
          
          
          DDET=XJ(1,1)*XJ(2,2)-XJ(1,2)*XJ(2,1)
!          write(9,*) 'DETJ', DDET
          
          CALL KJACINVE(XJ,DDET,XJI) ! Computes the inverse of the Jacobiam operator
!          write(9,*) 'JINV11', XJI(1,1), 'JINV12', XJI(1,2), 'JINV21', XJI(2,1), 'JINV22', XJI(2,2)
          
          CALL KMMULT(XJI,MCRD,MCRD,GShapeFcn4Q,MCRD,NNODE,dShapeFcn4Q) ! computes derivatives of shape functions
          CALL KCLEAR(B,NTENS,NDOFEL) ! initialize B matrix to zeros
          B(2,1)=dShapeFcn4Q(1,1)
          B(2,3)=dShapeFcn4Q(1,2)
          B(2,5)=dShapeFcn4Q(1,3)
          B(2,7)=dShapeFcn4Q(1,4)
          B(3,2)=dShapeFcn4Q(2,1)
          B(3,4)=dShapeFcn4Q(2,2)
          B(3,6)=dShapeFcn4Q(2,3)
          B(3,8)=dShapeFcn4Q(2,4)
          B(4,1)=dShapeFcn4Q(2,1)
          B(4,2)=dShapeFcn4Q(1,1)
          B(4,3)=dShapeFcn4Q(2,2)
          B(4,4)=dShapeFcn4Q(1,2)
          B(4,5)=dShapeFcn4Q(2,3)
          B(4,6)=dShapeFcn4Q(1,3)
          B(4,7)=dShapeFcn4Q(2,4)
          B(4,8)=dShapeFcn4Q(1,4)
          CALL KMMULT(D_E,NTENS,NTENS,B,NTENS,NDOFEL,AUX1) ! Computes D_E*B_E
          CALL KMTRAN(B,NTENS,NDOFEL,BT) ! computes transpose of B matrix
          !write(9,*) 'B_T_11', BT(1,1),'B_T_12', BT(1,2),'B_T_13', BT(1,3),'B_T_14', BT(1,4)
          CALL KMMULT(BT,NDOFEL,NTENS,AUX1,NTENS,NDOFEL,FRST1) ! computes K_E matrix as B_T*D_E*B_E
          CALL KSMULT(FRST1,NDOFEL,NDOFEL,DDET) ! MULTIPLY BY GAUSS WEIGHT
          !write(9,*) 'K_mat'
          DO II=1,NDOFEL
            !write(9,9) FRST1(I,1),FRST1(I,2),FRST1(I,3),FRST1(I,4)
          END DO
          CALL KUPDMAT(AMATRX,NDOFEL,NDOFEL,FRST1)
          
!         Computes strain increment and updates strain.
          CALL KMAVEC(B,NTENS,NDOFEL,DU,DSTRAN)
          CALL KUPDVEC(STRAN,NTENS,DSTRAN)
          
!         compute stress at gauss points
          CALL KMAVEC(D_E,NTENS,NTENS,STRAN,STRESS)
          
!         Clears material Jacobian and temporary stiffness matrix array for new Gauss point 
          CALL KCLEAR(FRST1,NDOFEL,NDOFEL)
          CALL KCLEAR(FRST2,NDOFEL,1)
          
!         Starts updating of state variables with updated values from UMAT.f
          JJ=1
          DO II=ISVINT_F,ISVINT_F+3
            SVARS(II)=STRESS(JJ)
            SVARS(II+4 )=STRAN(JJ)
            JJ=JJ+1
          END DO
!         Ends updating of state variables with updated values from UMAT.f
          
! calculate integration point coordinates
          call ShapeFcn4Q(GP_XI(I),GP_ETA(J), NNODE, ShapeFcn4QVec)
          CALL KMMULT(ShapeFcn4QVec,1,NNODE,COORDS_T,NNODE,MCRD,GPCOORD) ! computes coordinates of gauss points in global csys
! print gauss points coordinates in global csys
          
          write(9,10) JELEM, GPCOORD(1,1), GPCOORD(1,2), STRESS(2),STRESS(3),STRESS(1), STRESS(4), STRAN(2), STRAN(3),STRAN(1), STRAN(4)
!          write(9,*) 'Integration Point',GP_XI(I),GP_ETA(J)
!          write(9,*) 'GP_x', GPCOORD(1,1), 'GP_y', GPCOORD(1,2)
!          
!! print stresses
!          write(9,*) 'STRESSES'
!          write(9,*) 'sigma_11 ', 'sigma_22 ', 'sigma_33 ', 'sigma_12'
!          write(9,*) STRESS(2),STRESS(3),STRESS(1), STRESS(4)
!! print strains
!          write(9,*) 'STRAINS'
!          write(6,*) 'epsilon_11 ', 'epsilon_22 ', 'epsilon_33 ', 'gamma_12'
!          write(9,*) STRAN(2), STRAN(3),STRAN(1), STRAN(4)
!          write(9,*) '============================================================='

          NN=NN+1 ! increment NN 
        END DO
      END DO
! end of loop of gauss points

! print element stiffness matrix
!      write(9,*) 'AMATRX'
!      DO I=1,NDOFEL
!        write(9,9) AMATRX(I,1),AMATRX(I,2),AMATRX(I,3),AMATRX(I,4),AMATRX(I,5),AMATRX(I,6),AMATRX(I,7),AMATRX(I,8)
!      END DO




! print displacements      
!      DO I=1,NDOFEL
!        write(9,*) 'U',U(I),'DU',DU(I,1)
!      END DO
      DO I=1,NDOFEL
            DO J=1,NDOFEL
              RHS(I,1)=RHS(I,1)-AMATRX(I,J)*U(J)
            END DO
            !write(9,*) 'RHS',I,RHS(I,1)
      END DO
      
      
      
! EXTRAPOLATE STRAIN TO THE NODES
! print the extrapolated stress only for part c of ME759 assign 1
!13    format(I12,ES12.4,ES12.4,ES12.4,ES12.4,ES12.4,ES12.4,ES12.4,ES12.4)

      if (JTYPE == 3 .and. (JELEM == 12 .or. JELEM == 11 .or. JELEM == 10 .or. JELEM == 9)) then
! for node 2 of each element, xi=1, eta=1
          RII=1.0
          SII=1.0
          
!         Computes strain increment and updates strain.
          CALL KMAVEC(B,NTENS,NDOFEL,DU,DSTRAN)
          CALL KUPDVEC(STRAN,NTENS,DSTRAN)
        
! compute stress at nodal points
          CALL KCLEARV(STRESS,NTENS)
          CALL KMAVEC(D_E,NTENS,NTENS,STRAN,STRESS)
!          tmp(1)=STRESS(2) ! sigma_11
!          tmp(2)=STRESS(3) ! sigma_22
!          tmp(3)=STRESS(1) ! sigma_33
!          tmp(4)=STRESS(4) ! sigma_12
          SVARS(33)=STRESS(2) ! sigma_11
          SVARS(34)=STRESS(3) ! sigma_22
          SVARS(35)=STRESS(1) ! sigma_33
          SVARS(36)=STRESS(4) ! sigma_12
          
!===========================================================
! for node 4 of each element, xi=-1, eta=1
          CALL KCLEARV(STRAN,NTENS)
          CALL KCLEARV(STRESS,NTENS)
          RII=-1.0
          SII=1.0
!         Computes strain increment and updates strain.
          CALL KMAVEC(B,NTENS,NDOFEL,DU,DSTRAN)
          CALL KUPDVEC(STRAN,NTENS,DSTRAN)
        
! compute stress at nodal points
          CALL KMAVEC(D_E,NTENS,NTENS,STRAN,STRESS)
!          tmp(5)=STRESS(2) ! sigma_11
!          tmp(6)=STRESS(3) ! sigma_22
!          tmp(7)=STRESS(1) ! sigma_33
!          tmp(8)=STRESS(4) ! sigma_12
          SVARS(37)=STRESS(2) ! sigma_11
          SVARS(38)=STRESS(3) ! sigma_22
          SVARS(39)=STRESS(1) ! sigma_33
          SVARS(40)=STRESS(4) ! sigma_12
! write values in out file
!          write(9,*) 'Stresses at nodes'
!          write(9,13) JELEM,tmp(1),tmp(2),tmp(3),tmp(4),tmp(5),tmp(6),tmp(7),tmp(8)
      end if
! closes the fortran_code.out file
!      close(9) 
      RETURN
      END
! shape functions subroutine
      subroutine ShapeFcn4Q(xi, eta, NbElNodes, ShapeFcnVec)
      IMPLICIT REAL*8(A-H,O-Z)
      DIMENSION ShapeFcnVec(1,NbElNodes)
      call KCLEAR(ShapeFcnVec,1,NbElNodes)
      ShapeFcnVec(1,1)=(1./4.)*(1.- xi)*(1.- eta)
      ShapeFcnVec(1,2)=(1./4.)*(1.+ xi)*(1.- eta)
      ShapeFcnVec(1,3)=(1./4.)*(1.+ xi)*(1.+ eta)
      ShapeFcnVec(1,4)=(1./4.)*(1.- xi)*(1.+ eta)
      return
      end
!---------------------------------------------------------------------------------------------------------
!     MATRIX HANDLING
      SUBROUTINE KCLEAR(A,N,M)
      IMPLICIT REAL*8(A-H,O-Z)
      DIMENSION A(N,M)
      DO I=1,N
        DO J=1,M
          A(I,J)=0.
        END DO
      END DO
      RETURN
      END
!CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
!23456789012345678901234567890123456789012345678901234567890123456789012
!                                                                      C
!      SUBROUTINE KSMULT(A,NR,NC,S)                                    C
!      Matrix times a scalar.                                          C
!                                                                      C
!CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
!23456789012345678901234567890123456789012345678901234567890123456789012
      SUBROUTINE KSMULT(A,NR,NC,S)
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION A(NR,NC)
      DO I=1,NR
        DO J=1,NC
          DUM=A(I,J)
          A(I,J)=S*DUM
          DUM=0.D0
        END DO  
      END DO
      RETURN
      END
!CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
!23456789012345678901234567890123456789012345678901234567890123456789012
!                                                                      C
!      SUBROUTINE KMMULT(A,NRA,NCA,B,NRB,NCB,C)                        C
!      Real matrix product                                             C
!                                                                      C
!CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
!23456789012345678901234567890123456789012345678901234567890123456789012
      SUBROUTINE KMMULT(A,NRA,NCA,B,NRB,NCB,C)
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION A(NRA,NCA),B(NRB,NCB),C(NRA,NCB)
      CALL KCLEAR(C,NRA,NCB)
      DUM=0.
      DO I=1,NRA
        DO J=1,NCB
         DO K=1,NCA
           DUM=DUM+A(I,K)*B(K,J)           
         END DO
         C(I,J)=DUM
         DUM=0.
        END DO
      END DO
!      write(9,*) 'C11', C(1,1), 'C12', C(1,2), 'C21', C(2,1), 'C22', C(2,2)
      RETURN
      END
!CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
!23456789012345678901234567890123456789012345678901234567890123456789012
!                                                                      C
!      SUBROUTINE KUPDVEC(A,NR,B)                                      C
!      Updates an existing vector with an incremental vector.          C
!                                                                      C
!CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
!23456789012345678901234567890123456789012345678901234567890123456789012
      SUBROUTINE KUPDVEC(A,NR,B)
      IMPLICIT REAL*8 (A-H,O-Z)
      PARAMETER(ZERO=0.D0)
      DIMENSION A(NR),B(NR)
      DO I=1,NR
        DUM=A(I)
        A(I)=ZERO
        A(I)=DUM+B(I)
        DUM=ZERO
      END DO
      RETURN
      END
!------------------------------------------------------------------------------
      SUBROUTINE KUPDMAT(A,NR,NC,B)
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION A(NR,NC),B(NR,NC)
      DO I=1,NR
        DO J=1,NC
          DUM=A(I,J)
          A(I,J)=0.
          A(I,J)=DUM+B(I,J)
          DUM=0.
        END DO
      END DO
      RETURN
      END
      SUBROUTINE KMTRAN(A,NRA,NCA,B)
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION A(NRA,NCA),B(NCA,NRA)
      CALL KCLEAR(B,NCA,NRA)
      DO I=1,NRA
       DO J=1,NCA
         B(J,I)=A(I,J)
        END DO
      END DO
      RETURN
      END
      SUBROUTINE KCLEARV(A,N)
      IMPLICIT REAL*8(A-H,O-Z)
      DIMENSION A(N)
      DO I=1,N
        A(I)=0.
      END DO
      RETURN
      END
!CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
!23456789012345678901234567890123456789012345678901234567890123456789012
!                                                                      C
!      2X2 Jacobian inverse                                            C
!                                                                      C
!CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
!23456789012345678901234567890123456789012345678901234567890123456789012
!
      SUBROUTINE KJACINVE(XJA,DD,XJAI)
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION XJA(2,2),XJAI(2,2),XADJ(2,2)
      XADJ(1,1)=XJA(2,2)
      XADJ(1,2)=XJA(1,2)
      XADJ(2,1)=XJA(2,1)
      XADJ(2,2)=XJA(1,1)
      DO J=1,2
        DO K=1,2
          COFA=((-1)**(J+K))*XADJ(J,K)
          XJAI(J,K)=COFA/DD
        END DO
      END DO
      RETURN
      END
!CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
!23456789012345678901234567890123456789012345678901234567890123456789012
!                                                                      C
!      SUBROUTINE KMAVEC(A,NRA,NCA,B,C)                                C
!      Real matrix times vector                                        C
!                                                                      C
!CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
!23456789012345678901234567890123456789012345678901234567890123456789012
      SUBROUTINE KMAVEC(A,NRA,NCA,B,C)
      IMPLICIT REAL*8 (A-H,O-Z)
      PARAMETER(ZERO=0.D0)
      DIMENSION A(NRA,NCA),B(NCA),C(NRA)
      CALL KCLEARV(C,NRA)
      DO K1=1,NRA
        DO K2=1,NCA
          C(K1)=C(K1)+A(K1,K2)*B(K2)	    
        END DO
      END DO     
      RETURN
      END
      